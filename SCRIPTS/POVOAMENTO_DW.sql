--USE DW_DIARIO_ACADEMICO

-- Scripts para povoar o DIMENSÃO TEMPO 
-- povoando por mês
GO

create or alter procedure sp_insert_SEMESTRE (@ANO_INICIO INT,@ANO_FIM INT)
as
BEGIN
    DECLARE @id_tempo BIGINT,
			@nivel varchar(10),
			@semestre INT,
			@nome_semestre VARCHAR(100),
			@periodo_letivo VARCHAR(6), -- concatenacao entre ano e semestre
			@ano INT

	SET @ANO = @ANO_INICIO
	SET @SEMESTRE = 1
			
	WHILE @ANO <= @ANO_FIM AND @SEMESTRE <= 4
	BEGIN

			SELECT @NOME_SEMESTRE = CASE
				WHEN @SEMESTRE = 1 THEN 'PRIMEIRO SEMESTRE'
				WHEN @SEMESTRE = 2 THEN 'SEGUNDO SEMESTRE' 
				WHEN @SEMESTRE = 3 THEN 'TERCEIRA SEMESTRE'
				WHEN @SEMESTRE = 4 THEN 'QUARTA SEMESTRE' 
				END
				 
			SET @PERIODO_LETIVO = (SELECT CONCAT(LTRIM (STR(@ANO)),'.',LTRIM (STR(@SEMESTRE))))
			--PRINT @PERIODO_LETIVO
			INSERT INTO DIM_TEMPO(NIVEL,SEMESTRE,NOME_SEMESTRE,ANO,PERIODO_LETIVO) 
			VALUES('SEMESTRE', @SEMESTRE, @NOME_SEMESTRE, @ANO,@PERIODO_LETIVO)
					
		IF @SEMESTRE < 4 
		BEGIN
			SET @semestre = @semestre + 1
		END
		ELSE
		BEGIN
			SET @semestre = 1
			SET @ano = @ano + 1
		END
	END
END
GO


-- povoando por ano
GO
create or alter procedure sp_insert_ANO (@ANO_INICIO INT,@ANO_FIM INT)
as
BEGIN
    DECLARE @ano INT

	SET @ANO = @ANO_INICIO
			
	WHILE @ANO <= @ANO_FIM 
	BEGIN
				 
		INSERT INTO DIM_TEMPO(NIVEL,ANO) 
		VALUES('ANO', @ANO)
					
		SET @ano = @ano + 1

	END
END
GO

-- PARA TURNO
GO
CREATE OR ALTER PROCEDURE ETL_STAGING_TO_DW_TURNO
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_TURNO INT, @NOME_TURNO VARCHAR(50)

	DECLARE C_TURNO CURSOR
		FOR SELECT T.ID_TURNO, T.NOME_TURNO FROM AUX_TURNO T

	OPEN C_TURNO
	FETCH C_TURNO INTO @ID_TURNO, @NOME_TURNO

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFICA SE O TURNO NAO EXISTE NO DW
		IF NOT EXISTS (SELECT * FROM DIM_TURNO T WHERE T.COD = @ID_TURNO )
		BEGIN
			INSERT INTO DIM_TURNO(COD, NOME_TURNO)
			VALUES(@ID_TURNO, @NOME_TURNO)
		END
		-- SE O TURNO JA EXISTE NO DW ELE ATUALIZA
		ELSE
		BEGIN
			UPDATE DIM_TURNO
			SET NOME_TURNO = @NOME_TURNO
			WHERE COD = @ID_TURNO 
		END
		FETCH C_TURNO INTO @ID_TURNO, @NOME_TURNO
	END
	CLOSE C_TURNO
	DEALLOCATE C_TURNO
END

GO

-- PARA TURMA
GO
CREATE OR ALTER PROCEDURE ETL_STAGING_TO_DW_TURMA
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @ID_TURMA INT, @NUM_ALUNOS INT

	DECLARE C_TURMA CURSOR
		FOR SELECT TM.ID_TURMA, TM.NUM_ALUNOS FROM AUX_TURMA TM

	OPEN C_TURMA
	FETCH C_TURMA INTO @ID_TURMA, @NUM_ALUNOS

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- VERIFICA SE O TURMA NAO EXISTE NO DW
		IF NOT EXISTS (SELECT * FROM DIM_TURMA TM WHERE TM.COD = @ID_TURMA )
		BEGIN
			INSERT INTO DIM_TURMA(COD, NUM_ALUNOS)
			VALUES(@ID_TURMA, @NUM_ALUNOS)
		END
		-- SE O TURMA JA EXISTE NO DW ELE ATUALIZA
		ELSE
		BEGIN
			UPDATE DIM_TURMA
			SET NUM_ALUNOS = @NUM_ALUNOS
			WHERE COD = @ID_TURMA 
		END
		FETCH C_TURMA INTO @ID_TURMA, @NUM_ALUNOS
	END
	CLOSE C_TURMA
	DEALLOCATE C_TURMA
END
GO


-- EXECU��O E TESTES

--para a dim tempo		
TRUNCATE TABLE DIM_TEMPO -- LIMPANDO TUDO
EXEC sp_insert_MES 2000, 2022 -- DEU CERTO POR MES
EXEC sp_insert_ANO 2000, 2022  -- DEU CERTO POR ANO
SELECT * FROM DIM_TEMPO 
--
EXEC ETL_STAGING_TO_DW_TURNO
SELECT * FROM DIM_TURNO

EXEC ETL_STAGING_TO_DW_TURMA
SELECT * FROM DIM_TURMA